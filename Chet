import discord
from chatterbot.trainers import ListTrainer
from chatterbot.trainers import ChatterBotCorpusTrainer
from chatterbot import ChatBot
import Intuition

botname = 'Chet'
chatbot = ChatBot(botname, trainer='chatterbot.trainers.ListTrainer')
chatbot.set_trainer(ChatterBotCorpusTrainer)
chatbot.train('chatterbot.corpus.english')
chatbot.train('chatterbot.corpus.english.greetings')
chatbot.train('chatterbot.corpus.english.conversations')
chatbot.set_trainer(ListTrainer)
talk = False
array_holder = []


def big_train():
    array = []
    with open("clean.txt") as a:
        for line in a:
            array.append(str(line))
    chatbot.train(array)
    print('Done Training')


def quick_train(array):
    chatbot.train(array)
    print('Quick train')


def start_Chet():
    big_train()

start_Chet()


client = discord.Client()
print('Connected to Discord Client...')


def drop_digits(in_str):
    digit_list = "1234567890#"
    for char in digit_list:
        in_str = in_str.replace(char, "")

    return in_str


@client.event
async def on_ready():
    print('Logged in as [ ' + client.user.name + ' ]')
    channel = client.get_channel('321331526623297537')
    if talk == True:
        await client.send_message(client.get_channel('294353556448870401'), 'Hello everyone, Chet is here.', tts=False)
    print('Connected to Discord')
    # await client.join_voice_channel(channel)
    # print('Bot should joined the Channel')

async def holder(boolean):
    if boolean == True:
        with open("clean.txt", "a") as att_file:
            for item in array_holder:
                print(str(item))
                att_file.write(str(item) + "\n")
        del array_holder[:]
    if boolean == False:
        if talk == True:
            await client.send_message(client.get_channel('294353556448870401'), 'What is the correct answer?', tts=False)
        print('Removing old entry')
        array_holder.pop()
        array_holder.pop()




@client.event
async def on_message(message):
    if message.content.startswith('Chet, '):
        array = []
        tmp = message.content
        user = message.author
        one, two = tmp.split('..')
        one = one.replace('Chet, ', '')
        array.append(analyzer(one))
        array.append(analyzer(two))
        quick_train(array)
        print('Received direct train message...' + '[ ' + one + ' ]' + '[ ' + two + ']')
        print('User who sent it : ' + str(user))
        with open("clean.txt", "a") as att_file:
            for item in array:
                print(str(item))
                att_file.write(str(item) + "\n")

    elif message.content.startswith('Chet.train'):
        user = message.author
        print('Got request for train by : [ ' + user + ' ]')
        big_train()
        if talk == True:
           await client.send_message(client.get_channel('294353556448870401'), 'Ok', tts=False)

    elif message.content.startswith('Chet.leave'):
        user = message.author
        print('Got request for exit by : [ ' + user + ' ]')
        if talk == True:
            await client.send_message(client.user(message.author), 'Bye', tts=False)
        client.logout()
        exit()

    elif message.content.startswith('Chet '):
        array = []
        question = str(message.content)
        question = question.replace('Chet ', '')
        response = chatbot.get_response(question)
        print('Asked : ' + str(question))
        print('Answered : ' + str(response))
        array.append(question)
        array_holder.append(question)
        array_holder.append(str(response))
        if talk == True:
            await client.send_message(client.user(message.author), str(response), tts=False)

    elif message.content.startswith('got q '):
        question = str(message.content)
        user = message.author
        question = question.replace('got q ', '')
        try:
            info = Intuition.ask_about(question)
            await client.send_message(user, info)
        except KeyError:
            print('ERROR ON INPUT ARGUMENT')
            await client.send_message(user, 'Sorry, try again.')

    elif message.content.startswith(''):
        array = []
        tmp = message.content
        user = message.author
        three = tmp
        array.append(analyzer(three))
        if str(user) != 'Chet#1584':
            with open("clean.txt", "a") as att_file:
                for item in array:
                    print('Received random message... [ ' + item + ' ]')
                    att_file.write(item + "\n")


def analyzer(clean_line):
    held = str.lower(clean_line)
    return held


client.run('TOKEN')

